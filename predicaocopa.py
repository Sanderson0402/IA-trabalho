# -*- coding: utf-8 -*-
"""PredicaoCopa.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19AJJn-EPKCl005AF56t2I8fCAm6MwK0M

Importação das Bibiliotecas e Abertura dos Datasets da Copa de 2014 e 2018
"""

from google.colab import files
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

uploaded = files.upload()

filename = next(iter(uploaded))

data_2014 = pd.read_json(filename)
df_2014 = pd.json_normalize(data_2014['groups'], record_path=['standings'], meta=['name'])

print(f"Arquivo {filename} carregado com sucesso!")
print(df_2014.head())

uploaded = files.upload()

filename = next(iter(uploaded))

data_2018 = pd.read_json(filename)

df_2018 = pd.json_normalize(data_2018['groups'], record_path=['standings'], meta=['name'])

print(f"Arquivo {filename} carregado com sucesso!")
print(df_2018.head())

"""Descrição Estatística dos Datasets"""

df_2014.describe()

df_2018.describe()

"""Concatenando os Datasets"""

df = pd.concat([df_2018, df_2014])

"""Gráfico de Gols Marcados"""

goals_by_team = df.groupby('team.name')['goals_for'].sum().reset_index()

goals_by_team = goals_by_team.sort_values(by='goals_for', ascending=False)

plt.figure(figsize=(12, 8))
sns.barplot(x='goals_for', y='team.name', hue='team.name', data=goals_by_team, dodge=False, palette='viridis', legend=False)

plt.title('Total de Gols por Seleção', fontsize=16)
plt.xlabel('Total de Gols', fontsize=14)
plt.ylabel('Time', fontsize=14)

plt.show()

"""Gráfico de Gols Sofridos"""

goals_against_by_team = df.groupby('team.name')['goals_against'].sum().reset_index()

goals_against_by_team = goals_against_by_team.sort_values(by='goals_against', ascending=False)

plt.figure(figsize=(12, 8))
sns.barplot(x='goals_against', y='team.name', hue='team.name', data=goals_against_by_team, dodge=False, palette='viridis', legend=False)

plt.title('Total de Gols Sofridos por Time', fontsize=16)
plt.xlabel('Total de Gols Sofridos', fontsize=14)
plt.ylabel('Time', fontsize=14)

# Mostrar o gráfico
plt.show()

"""Gráficos de Correlação"""

sns.set(style="whitegrid")

plt.figure(figsize=(10, 6))
sns.scatterplot(x='goals_for', y='pts', data=df, hue='team.name', palette='viridis', legend=False)
plt.title('Correlação entre Pontos e Gols Marcados', fontsize=16)
plt.xlabel('Gols Marcados', fontsize=14)
plt.ylabel('Pontos', fontsize=14)
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='goals_against', y='pts', data=df, hue='team.name', palette='viridis', legend=False)
plt.title('Correlação entre Pontos e Gols Sofridos', fontsize=16)
plt.xlabel('Gols Sofridos', fontsize=14)
plt.ylabel('Pontos', fontsize=14)
plt.show()

"""Selecionar as colunas de interesse"""

features = ['pos', 'won', 'drawn', 'lost', 'goals_for', 'goals_against', 'pts']
df = df[features]

"""Adicionar uma coluna 'advanced' que é 1 se a equipe avançou e 0 caso contrário"""

df['advanced'] = df['pos'].apply(lambda x: 1 if x <= 2 else 0)

"""Remoção de 'pos' da lista de features"""

features.remove('pos')

"""Divisão dos dados em conjuntos de treinamento e teste.<br>
Treino de modelo de regressão logística.<br>
Predição da probabilidade de a equipe avançar.
"""

import numpy as np
X_train, X_test, y_train, y_test = train_test_split(df[features], df['advanced'], test_size=0.2, random_state=42)

model = LogisticRegression()
model.fit(X_train, y_train)

team_data = {'won': 1, 'drawn': 2, 'lost': 0, 'goals_for': 3, 'goals_against': 5, 'pts': 5}
team_df = pd.DataFrame([team_data])

prob = model.predict_proba(team_df[features])[0][1]

print(f'A probabilidade de a equipe avançar é {prob:.2f}')

y_pred_proba = model.predict_proba(X_test)[:, 1]

correlation = pd.Series(y_test).corr(pd.Series(y_pred_proba))

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred_proba, alpha=0.5)
plt.title('Correlação entre Probabilidades Reais e Previstas')
plt.xlabel('Probabilidades Reais')
plt.ylabel('Probabilidades Previstas')
plt.grid(True)

x_values = np.linspace(0, 1, 100)
y_values = x_values
plt.plot(x_values, y_values, color='red', linestyle='--')

plt.show()

"""Upar o terceiro dataset"""

uploaded = files.upload()

filename = next(iter(uploaded))

data = pd.read_json(filename)

print(f"Arquivo {filename} carregado com sucesso!")

"""Extração das rodadas de interesse.<br>
Criação do DataFrame com os dados.<br>
Visualizar as primeiras linhas.<br>
"""

matches = data['rounds']
knockout_rounds = ['Round of 16', 'Quarter-finals', 'Semi-finals', 'Final']
matches = [match for match in matches if match['name'] in knockout_rounds]

df = pd.DataFrame(matches)

print(df.head())

goals_per_team = {}

for round in data['rounds']:
    for match in round['matches']:
        team1 = match['team1']['name']
        team2 = match['team2']['name']
        score1 = match['score1']
        score2 = match['score2']

        if team1 not in goals_per_team:
            goals_per_team[team1] = 0
        if team2 not in goals_per_team:
            goals_per_team[team2] = 0

        goals_per_team[team1] += score1
        goals_per_team[team2] += score2

df_gols = pd.DataFrame(list(goals_per_team.items()), columns=['Team', 'Goals'])

df_gols = df_gols.sort_values(by='Goals', ascending=False)

plt.figure(figsize=(12, 8))
sns.barplot(x='Goals', y='Team', hue='Team', data=df_gols, dodge=False, palette='viridis', legend=False)

plt.title('Total de Gols por Time no Mata-Mata', fontsize=16)
plt.xlabel('Total de Gols', fontsize=14)
plt.ylabel('Time', fontsize=14)

plt.show()